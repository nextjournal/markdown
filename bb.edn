{:min-bb-version "0.7.8"
 :tasks
 {:requires ([clojure.edn :as edn]
             [clojure.string :as str]
             [babashka.fs :as fs]
             [babashka.process :as p])

  :init (do
          (def major 0)
          (def minor 6)
          (def rev-count-offset 69) ;; previous repo offset
          (def meta-inf-file "resources/META-INF/nextjournal/markdown/meta.edn")

          (defn rev-count []
            (-> (p/process ["git" "rev-list" "HEAD" "--count"] {:out :string})
              p/check :out str/trim Integer/parseInt))

          (defn version [] (format "%d.%d.%d" major minor (inc (+ (rev-count) rev-count-offset))))

          (defn read-version [] (-> (slurp meta-inf-file) edn/read-string :version)))

  yarn-install
  {:doc "Installs and updates npm dependencies"
   :task (shell "yarn install")}

  build-esm
  {:doc "Builds the ESM JS module file for the markdown module"
   :task (shell "./node_modules/.bin/esbuild src/js/markdown.js --bundle --minify --outfile=resources/js/markdown.mjs --format=esm")
   :depends [yarn-install]}

  test
  {:doc "runs tests in the markdown module"
   :depends [build-esm]
   :task (clojure "-X:test")}

  build:notebooks
  {:doc "builds a Clerk static with notebooks specified in deps.edn given a specified git SHA"
   :depends [cljs:sci:release]
   :task (clojure (str "-X:nextjournal/clerk :git/sha '\"" (first *command-line-args*) "\"' :browse? false"))}

  dev
  {:doc "Boots and watches both shadow browser test and sci builds"
   :depends [yarn-install]
   :task (clojure "-M:test:nextjournal/clerk:sci watch sci browser-test")}

  cljs:sci
  {:doc "watches cljs build"
   :depends [yarn-install]
   :task (clojure "-M:nextjournal/clerk:sci watch sci")}

  cljs:sci:release
  {:doc "watches cljs build"
   :depends [yarn-install]
   :task (clojure "-M:nextjournal/clerk:sci release sci")}

  cljs:compile:tests
  {:doc "compiles tests as node executable"
   :depends [yarn-install]
   :task (clojure "-M:cljs-test compile test")}

  test:cljs:browser
  {:doc "runs cljs tests in the browsr"
   :task (clojure "-M:cljs-test watch browser-test")}

  test:cljs
  {:doc "runs cljs tests via node"
   :depends [cljs:compile:tests]
   :task (shell "yarn node --trace-uncaught out/node-tests.js")}

  link-changelog {:doc "Turns the issue references in the changelog into links"
                  :task (do (defn tag->issue-link [s]
                              (clojure.string/replace s (re-pattern "(?<!\\[)#([0-9]+)") "[#$1](https://github.com/nextjournal/markdown/issues/$1)"))
                            (let [f "CHANGELOG.md"]
                              (spit f (tag->issue-link (slurp f)))))}

  update-meta {:doc "Updates meta.edn with current version (based on commit count currently)."
               :task (spit (doto (fs/file meta-inf-file)
                             (-> fs/parent fs/create-dirs)) {:version (version)})}

  tag {:doc "Tags release and pushes tag to Github."
       :task (let [tag (str "v" (read-version))]
               (shell "git tag" tag))}

  delete-tag {:doc "Tells git to delete the tag at the current version"
              :task (shell (str "git tag -d v" (read-version)))}

  current-version {:doc "Prints the version as written to META-INF during publishing"
                   :task (print (read-version))}

  publish {:doc "Prepares repo for publishing via CI"
           :task (do
                   (run 'update-meta)
                   (println "Preparing repo for Release.\n Updated worktree will be added and committed (e.g. changes to CHANGELOG)" (read-version))
                   (shell "git add -u")
                   (shell (str "git commit -m v" (read-version)))
                   (run 'tag)
                   (println "\n\nRun:\n\n" "  git push --atomic"
                     "origin" "main" (str "v" (read-version))
                     "\n\nto push the release and let CI build it!"))}

  -current-tag (->> (shell {:out :string} "git tag --points-at HEAD")
                 :out
                 str/trim
                 not-empty)

  -current-branch (->> (shell {:out :string} "git branch --show-current")
                    :out
                    str/trim)

  jar {:doc "Build jar"
       :task (do
               (println "Building jar")
               (clojure (str "-T:build jar :version '\"" (read-version) "\"'")))}

  ci:publish {:doc "Publish task which will be run on CI"
              :depends [-current-tag -current-branch]
              :task (do
                      (prn :current-tag -current-tag)
                      (prn :current-branch -current-branch)
                      (if (and -current-tag (= "main" -current-branch))
                        (do
                          (println "Deploying to clojars")
                          (clojure (str "-T:build deploy :version '\"" (read-version) "\"'")))
                        ;; still build jar for artifact upload
                        (run 'jar)))}}}
