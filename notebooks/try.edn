{:nextjournal.clerk/remount "5dsKr9LWBdVzbawsgvafc7RdjCTcMS", :cljs-libs [#viewer-eval (clojure.core/load-string "(ns nextjournal.markdown.render\n  (:require\n   [\"katex\" :as katex]\n   [\"@codemirror/language\" :refer [defaultHighlightStyle syntaxHighlighting LanguageSupport]]\n   [\"@codemirror/state\" :refer [EditorState]]\n   [\"@codemirror/view\" :refer [EditorView keymap]]\n   [\"@codemirror/lang-markdown\" :as MD :refer [markdown markdownLanguage]]\n   [\"react\" :as react]\n   [nextjournal.markdown :as md]\n   [nextjournal.clerk.viewer :as v]\n   [nextjournal.clerk.render.hooks :as hooks]\n   [nextjournal.markdown.transform :as md.transform]\n   [nextjournal.clojure-mode :as clojure-mode]\n   [nextjournal.clerk.render.code :as code]\n   [clojure.string :as str]\n   [nextjournal.clerk.render :as render]\n   [reagent.core :as r]))\n\n(def theme #js {\"&.cm-editor.cm-focused\" #js {:outline \"none\"}\n                \".cm-activeLine\" #js {:background-color \"rgb(226 232 240)\"}\n                \".cm-line\" #js {:padding \"0\"\n                                :line-height \"1.6\"\n                                :font-size \"15px\"\n                                :font-family \"\\\"Fira Mono\\\", monospace\"}})\n\n;; syntax (an LRParser) + support (a set of extensions)\n(def clojure-lang (LanguageSupport. (clojure-mode/syntax)\n                                    (.. clojure-mode/default-extensions (slice 1))))\n(defn on-change-ext [f]\n  (.. EditorState -transactionExtender\n      (of (fn [^js tr]\n            (when (.-docChanged tr) (f (.. tr -state sliceDoc)))\n            #js {}))))\n\n(defn eval-string [source]\n  (when (not-empty (str/trim source))\n    (try {:result  #_:clj-kondo/ignore (load-string source)}\n         (catch js/Error e\n           {:error (str (.-message e))}))))\n\n(defn editor [{:keys [doc lang editable? on-change] :or {editable? true}}]\n  (let [!editor-el (hooks/use-ref)\n        extensions (into-array (cond-> [(syntaxHighlighting defaultHighlightStyle)\n                                        (.. EditorState -allowMultipleSelections (of editable?))\n                                        #_(foldGutter)\n                                        (.. EditorView -editable (of editable?))\n                                        (.of keymap clojure-mode/complete-keymap)\n                                        (.theme EditorView theme)]\n\n                                 on-change\n                                 (conj (on-change-ext on-change))\n\n                                 (= :clojure lang)\n                                 (conj (.-extension clojure-lang))\n\n                                 (= :markdown lang)\n                                 (conj (markdown #js {:base markdownLanguage\n                                                      :defaultCodeLanguage clojure-lang}))))]\n    (hooks/use-effect\n     (fn []\n       (let [editor-view* (code/make-view (code/make-state doc extensions) @!editor-el)]\n         #(.destroy editor-view*))) [doc])\n    [:div {:ref !editor-el}]))\n\n(defn clojure-editor [{:as opts :keys [doc]}]\n  (let [!result (hooks/use-state nil)]\n    (hooks/use-effect (fn [] (reset! !result (eval-string doc))) [doc])\n    [:div\n     [:div.p-2.bg-slate-100\n      [editor (assoc opts :lang :clojure :editable? false)]]\n     [:div.viewer-result.mt-1.ml-5\n      (when-some [{:keys [error result]} @!result]\n        (cond\n          error [:div.red error]\n          (react/isValidElement result) result\n          :else [render/inspect result]))]]))\n\n(def renderers\n  (assoc md.transform/default-hiccup-renderers\n         :code (fn [_ctx node] [clojure-editor {:doc (md.transform/->text node)}])\n         :todo-item (fn [ctx {:as node :keys [attrs]}]\n                      (md.transform/into-markup [:li [:input {:type \"checkbox\" :default-checked (:checked attrs)}]] ctx node))\n         :formula (fn [_ctx node]\n                    [:span {:dangerouslySetInnerHTML {:__html (.renderToString katex (md.transform/->text node))}}])\n         :block-formula (fn [_ctx node]\n                          [:div {:dangerouslySetInnerHTML {:__html (.renderToString katex (md.transform/->text node) #js {:displayMode true})}}])))\n\n(defn inspect-expanded [x]\n  (r/with-let [expanded-at (r/atom {:hover-path [] :prompt-multi-expand? false})]\n    (render/inspect-presented {:!expanded-at expanded-at}\n                              (v/present x))))\n\n(defn try-markdown [init-text]\n  (let [text->state (fn [text]\n                      (let [parsed (md/parse text)]\n                        {:parsed parsed\n                         :hiccup (nextjournal.markdown.transform/->hiccup renderers parsed)}))\n        !state (hooks/use-state (text->state init-text))]\n    [:div.grid.grid-cols-2.m-10\n     [:div.m-2.p-2.text-xl.border-2.overflow-y-scroll.bg-slate-100 {:style {:height \"20rem\"}}\n      [editor {:doc init-text :on-change #(reset! !state (text->state %)) :lang :markdown}]]\n     [:div.m-2.p-2.font-medium.overflow-y-scroll {:style {:height \"20rem\"}}\n      [inspect-expanded (:parsed @!state)]]\n     [:div.m-2.p-2.overflow-x-scroll\n      [inspect-expanded (:hiccup @!state)]]\n     [:div.m-2.p-2.bg-slate-50.viewer-markdown\n      [v/html (:hiccup @!state)]]]))\n")], :path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Nextjournal Markdown Live Demo", :emoji "‚úèÔ∏è", :path "#nextjournal-markdown-live-demo", :items []}], :nextjournal/render-opts {:toc-visibility false, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility false, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns try), :file "notebooks/try.clj", :scope try, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../"} "Index"] [:span.mx-2 "‚Ä¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://github.com/nextjournal/markdown/blob/a22f3ba76192571b6bb1762d8872a1d3e2f963b6/notebooks/try.clj"} "notebooks/try.clj" [:<> "@" [:span.tabular-nums "a22f3ba"]]]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "‚úèÔ∏è Nextjournal Markdown Live Demo", :description "Edit markdown text, see parsed AST and transformed hiccup live. Preview how Clerk renders it."}, :title "‚úèÔ∏è Nextjournal Markdown Live Demo", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "user/markdown-5dtKYTVFLgoVFMsa1wHig8p46gEssq"} ["h1" {:id "nextjournal-markdown-live-demo"} [:<> "‚úèÔ∏è Nextjournal Markdown Live Demo"]]], :nextjournal/render-opts {:id "user/markdown-5dtKYTVFLgoVFMsa1wHig8p46gEssq"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "try/markdown-5dsMwq4iVShwH34R2jJ5YavCiW6EZm"} [:p [:em [:<> "Edit markdown text, see parsed AST and transformed hiccup live. Preview how Clerk renders it."]]]], :nextjournal/render-opts {:id "try/markdown-5dsMwq4iVShwH34R2jJ5YavCiW6EZm"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(clerk/with-viewer {:render-fn 'nextjournal.markdown.render/try-markdown\n                    :require-cljs true}\n  \"# üëã Hello Markdown\n\n```clojure id=xxyyzzww\n(reduce + [1 2 3])\n```\n## Subsection\n- [x] type **some**\n- [x] ~~nasty~~\n- [ ] _stuff_ here\")", :nextjournal/render-opts {:loc {:line 6, :end-line 18, :column 1, :end-column 21}, :id "try/anon-expr-5dsHMqm35am78U8y6k8Ef5sWuvuU1i-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/folded-code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-folded-code-block, :hash "5dt3F3pXDCJHWEKwRWd1FTwBTC7bQ1"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "# üëã Hello Markdown\n\n```clojure id=xxyyzzww\n(reduce + [1 2 3])\n```\n## Subsection\n- [x] type **some**\n- [x] ~~nasty~~\n- [ ] _stuff_ here", :nextjournal/width :full, :nextjournal/viewer {:render-fn #viewer-fn nextjournal.markdown.render/try-markdown, :require-cljs true, :hash "5dsneDwceYirqX1B6e53FqdMDSBPaS"}, :nextjournal/render-opts {:id "try/anon-expr-5dsHMqm35am78U8y6k8Ef5sWuvuU1i-result-1"}}, :nextjournal/blob-id "5drca6Mdw3C1DVaVc5KVV5dMNXdh8P"}, :nextjournal/width :full, :nextjournal/render-opts {:id "try/anon-expr-5dsHMqm35am78U8y6k8Ef5sWuvuU1i-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}